{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ResizeObserver as ResizeObserver$1 } from 'vue-resize';\nimport { ObserveVisibility } from 'vue-observe-visibility';\nimport ScrollParent from 'scrollparent';\nimport Vue from 'vue';\nvar config = {\n  itemsLimit: 1000\n};\nconst props = {\n  items: {\n    type: Array,\n    required: true\n  },\n  keyField: {\n    type: String,\n    default: 'id'\n  },\n  direction: {\n    type: String,\n    default: 'vertical',\n    validator: value => ['vertical', 'horizontal'].includes(value)\n  },\n  listTag: {\n    type: String,\n    default: 'div'\n  },\n  itemTag: {\n    type: String,\n    default: 'div'\n  }\n};\nfunction simpleArray() {\n  return this.items.length && typeof this.items[0] !== 'object';\n}\nlet supportsPassive = false;\nif (typeof window !== 'undefined') {\n  supportsPassive = false;\n  try {\n    var opts = Object.defineProperty({}, 'passive', {\n      get() {\n        supportsPassive = true;\n      }\n    });\n    window.addEventListener('test', null, opts);\n  } catch (e) {}\n}\n\n//\nlet uid = 0;\nvar script$2 = {\n  name: 'RecycleScroller',\n  components: {\n    ResizeObserver: ResizeObserver$1\n  },\n  directives: {\n    ObserveVisibility\n  },\n  props: {\n    ...props,\n    itemSize: {\n      type: Number,\n      default: null\n    },\n    gridItems: {\n      type: Number,\n      default: undefined\n    },\n    itemSecondarySize: {\n      type: Number,\n      default: undefined\n    },\n    minItemSize: {\n      type: [Number, String],\n      default: null\n    },\n    sizeField: {\n      type: String,\n      default: 'size'\n    },\n    typeField: {\n      type: String,\n      default: 'type'\n    },\n    buffer: {\n      type: Number,\n      default: 200\n    },\n    pageMode: {\n      type: Boolean,\n      default: false\n    },\n    prerender: {\n      type: Number,\n      default: 0\n    },\n    emitUpdate: {\n      type: Boolean,\n      default: false\n    },\n    skipHover: {\n      type: Boolean,\n      default: false\n    },\n    listTag: {\n      type: String,\n      default: 'div'\n    },\n    itemTag: {\n      type: String,\n      default: 'div'\n    },\n    listClass: {\n      type: [String, Object, Array],\n      default: ''\n    },\n    itemClass: {\n      type: [String, Object, Array],\n      default: ''\n    }\n  },\n  data() {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null\n    };\n  },\n  computed: {\n    sizes() {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': {\n            accumulator: 0\n          }\n        };\n        const items = this.items;\n        const field = this.sizeField;\n        const minItemSize = this.minItemSize;\n        let computedMinSize = 10000;\n        let accumulator = 0;\n        let current;\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize;\n          if (current < computedMinSize) {\n            computedMinSize = current;\n          }\n          accumulator += current;\n          sizes[i] = {\n            accumulator,\n            size: current\n          };\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize;\n        return sizes;\n      }\n      return [];\n    },\n    simpleArray\n  },\n  watch: {\n    items() {\n      this.updateVisibleItems(true);\n    },\n    pageMode() {\n      this.applyPageMode();\n      this.updateVisibleItems(false);\n    },\n    sizes: {\n      handler() {\n        this.updateVisibleItems(false);\n      },\n      deep: true\n    },\n    gridItems() {\n      this.updateVisibleItems(true);\n    },\n    itemSecondarySize() {\n      this.updateVisibleItems(true);\n    }\n  },\n  created() {\n    this.$_startIndex = 0;\n    this.$_endIndex = 0;\n    this.$_views = new Map();\n    this.$_unusedViews = new Map();\n    this.$_scrollDirty = false;\n    this.$_lastUpdateScrollPosition = 0;\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true;\n      this.updateVisibleItems(false);\n    }\n    if (this.gridItems && !this.itemSize) {\n      console.error('[vue-recycle-scroller] You must provide an itemSize when using gridItems');\n    }\n  },\n  mounted() {\n    this.applyPageMode();\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false;\n      this.updateVisibleItems(true);\n      this.ready = true;\n    });\n  },\n  activated() {\n    const lastPosition = this.$_lastUpdateScrollPosition;\n    if (typeof lastPosition === 'number') {\n      this.$nextTick(() => {\n        this.scrollToPosition(lastPosition);\n      });\n    }\n  },\n  beforeDestroy() {\n    this.removeListeners();\n  },\n  methods: {\n    addView(pool, index, item, key, type) {\n      const view = {\n        item,\n        position: 0\n      };\n      const nonReactive = {\n        id: uid++,\n        index,\n        used: true,\n        key,\n        type\n      };\n      Object.defineProperty(view, 'nr', {\n        configurable: false,\n        value: nonReactive\n      });\n      pool.push(view);\n      return view;\n    },\n    unuseView(view, fake = false) {\n      const unusedViews = this.$_unusedViews;\n      const type = view.nr.type;\n      let unusedPool = unusedViews.get(type);\n      if (!unusedPool) {\n        unusedPool = [];\n        unusedViews.set(type, unusedPool);\n      }\n      unusedPool.push(view);\n      if (!fake) {\n        view.nr.used = false;\n        view.position = -9999;\n        this.$_views.delete(view.nr.key);\n      }\n    },\n    handleResize() {\n      this.$emit('resize');\n      if (this.ready) this.updateVisibleItems(false);\n    },\n    handleScroll(event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true;\n        requestAnimationFrame(() => {\n          this.$_scrollDirty = false;\n          const {\n            continuous\n          } = this.updateVisibleItems(false, true);\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout);\n            this.$_refreshTimout = setTimeout(this.handleScroll, 100);\n          }\n        });\n      }\n    },\n    handleVisibilityChange(isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible');\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false);\n          });\n        } else {\n          this.$emit('hidden');\n        }\n      }\n    },\n    updateVisibleItems(checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize;\n      const gridItems = this.gridItems || 1;\n      const itemSecondarySize = this.itemSecondarySize || itemSize;\n      const minItemSize = this.$_computedMinItemSize;\n      const typeField = this.typeField;\n      const keyField = this.simpleArray ? null : this.keyField;\n      const items = this.items;\n      const count = items.length;\n      const sizes = this.sizes;\n      const views = this.$_views;\n      const unusedViews = this.$_unusedViews;\n      const pool = this.pool;\n      let startIndex, endIndex;\n      let totalSize;\n      let visibleStartIndex, visibleEndIndex;\n      if (!count) {\n        startIndex = endIndex = visibleStartIndex = visibleEndIndex = totalSize = 0;\n      } else if (this.$_prerender) {\n        startIndex = visibleStartIndex = 0;\n        endIndex = visibleEndIndex = Math.min(this.prerender, items.length);\n        totalSize = null;\n      } else {\n        const scroll = this.getScroll();\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition;\n          if (positionDiff < 0) positionDiff = -positionDiff;\n          if (itemSize === null && positionDiff < minItemSize || positionDiff < itemSize) {\n            return {\n              continuous: true\n            };\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start;\n        const buffer = this.buffer;\n        scroll.start -= buffer;\n        scroll.end += buffer;\n\n        // account for leading slot\n        let beforeSize = 0;\n        if (this.$refs.before) {\n          beforeSize = this.$refs.before.scrollHeight;\n          scroll.start -= beforeSize;\n        }\n\n        // account for trailing slot\n        if (this.$refs.after) {\n          const afterSize = this.$refs.after.scrollHeight;\n          scroll.end += afterSize;\n        }\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h;\n          let a = 0;\n          let b = count - 1;\n          let i = ~~(count / 2);\n          let oldI;\n\n          // Searching for startIndex\n          do {\n            oldI = i;\n            h = sizes[i].accumulator;\n            if (h < scroll.start) {\n              a = i;\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i;\n            }\n            i = ~~((a + b) / 2);\n          } while (i !== oldI);\n          i < 0 && (i = 0);\n          startIndex = i;\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator;\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1;\n          } else {\n            endIndex++;\n            // Bounds\n            endIndex > count && (endIndex = count);\n          }\n\n          // search visible startIndex\n          for (visibleStartIndex = startIndex; visibleStartIndex < count && beforeSize + sizes[visibleStartIndex].accumulator < scroll.start; visibleStartIndex++);\n\n          // search visible endIndex\n          for (visibleEndIndex = visibleStartIndex; visibleEndIndex < count && beforeSize + sizes[visibleEndIndex].accumulator < scroll.end; visibleEndIndex++);\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize * gridItems);\n          const remainer = startIndex % gridItems;\n          startIndex -= remainer;\n          endIndex = Math.ceil(scroll.end / itemSize * gridItems);\n          visibleStartIndex = Math.max(0, Math.floor((scroll.start - beforeSize) / itemSize * gridItems));\n          visibleEndIndex = Math.floor((scroll.end - beforeSize) / itemSize * gridItems);\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0);\n          endIndex > count && (endIndex = count);\n          visibleStartIndex < 0 && (visibleStartIndex = 0);\n          visibleEndIndex > count && (visibleEndIndex = count);\n          totalSize = Math.ceil(count / gridItems) * itemSize;\n        }\n      }\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError();\n      }\n      this.totalSize = totalSize;\n      let view;\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex;\n      if (this.$_continuous !== continuous) {\n        if (continuous) {\n          views.clear();\n          unusedViews.clear();\n          for (let i = 0, l = pool.length; i < l; i++) {\n            view = pool[i];\n            this.unuseView(view);\n          }\n        }\n        this.$_continuous = continuous;\n      } else if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i];\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = items.indexOf(view.item);\n            }\n\n            // Check if index is still in visible range\n            if (view.nr.index === -1 || view.nr.index < startIndex || view.nr.index >= endIndex) {\n              this.unuseView(view);\n            }\n          }\n        }\n      }\n      const unusedIndex = continuous ? null : new Map();\n      let item, type, unusedPool;\n      let v;\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i];\n        const key = keyField ? item[keyField] : item;\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`);\n        }\n        view = views.get(key);\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view);\n          continue;\n        }\n\n        // No view assigned to item\n        if (!view) {\n          if (i === items.length - 1) this.$emit('scroll-end');\n          if (i === 0) this.$emit('scroll-start');\n          type = item[typeField];\n          unusedPool = unusedViews.get(type);\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop();\n              view.item = item;\n              view.nr.used = true;\n              view.nr.index = i;\n              view.nr.key = key;\n              view.nr.type = type;\n            } else {\n              view = this.addView(pool, i, item, key, type);\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0;\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type);\n              this.unuseView(view, true);\n              unusedPool = unusedViews.get(type);\n            }\n            view = unusedPool[v];\n            view.item = item;\n            view.nr.used = true;\n            view.nr.index = i;\n            view.nr.key = key;\n            view.nr.type = type;\n            unusedIndex.set(type, v + 1);\n            v++;\n          }\n          views.set(key, view);\n        } else {\n          view.nr.used = true;\n          view.item = item;\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator;\n          view.offset = 0;\n        } else {\n          view.position = Math.floor(i / gridItems) * itemSize;\n          view.offset = i % gridItems * itemSecondarySize;\n        }\n      }\n      this.$_startIndex = startIndex;\n      this.$_endIndex = endIndex;\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex, visibleStartIndex, visibleEndIndex);\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer);\n      this.$_sortTimer = setTimeout(this.sortViews, 300);\n      return {\n        continuous\n      };\n    },\n    getListenerTarget() {\n      let target = ScrollParent(this.$el);\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window;\n      }\n      return target;\n    },\n    getScroll() {\n      const {\n        $el: el,\n        direction\n      } = this;\n      const isVertical = direction === 'vertical';\n      let scrollState;\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect();\n        const boundsSize = isVertical ? bounds.height : bounds.width;\n        let start = -(isVertical ? bounds.top : bounds.left);\n        let size = isVertical ? window.innerHeight : window.innerWidth;\n        if (start < 0) {\n          size += start;\n          start = 0;\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start;\n        }\n        scrollState = {\n          start,\n          end: start + size\n        };\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight\n        };\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth\n        };\n      }\n      return scrollState;\n    },\n    applyPageMode() {\n      if (this.pageMode) {\n        this.addListeners();\n      } else {\n        this.removeListeners();\n      }\n    },\n    addListeners() {\n      this.listenerTarget = this.getListenerTarget();\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive ? {\n        passive: true\n      } : false);\n      this.listenerTarget.addEventListener('resize', this.handleResize);\n    },\n    removeListeners() {\n      if (!this.listenerTarget) {\n        return;\n      }\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll);\n      this.listenerTarget.removeEventListener('resize', this.handleResize);\n      this.listenerTarget = null;\n    },\n    scrollToItem(index) {\n      let scroll;\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0;\n      } else {\n        scroll = Math.floor(index / this.gridItems) * this.itemSize;\n      }\n      this.scrollToPosition(scroll);\n    },\n    scrollToPosition(position) {\n      const direction = this.direction === 'vertical' ? {\n        scroll: 'scrollTop',\n        start: 'top'\n      } : {\n        scroll: 'scrollLeft',\n        start: 'left'\n      };\n      let viewport;\n      let scrollDirection;\n      let scrollDistance;\n      if (this.pageMode) {\n        const viewportEl = ScrollParent(this.$el);\n        // HTML doesn't overflow like other elements\n        const scrollTop = viewportEl.tagName === 'HTML' ? 0 : viewportEl[direction.scroll];\n        const bounds = viewportEl.getBoundingClientRect();\n        const scroller = this.$el.getBoundingClientRect();\n        const scrollerPosition = scroller[direction.start] - bounds[direction.start];\n        viewport = viewportEl;\n        scrollDirection = direction.scroll;\n        scrollDistance = position + scrollTop + scrollerPosition;\n      } else {\n        viewport = this.$el;\n        scrollDirection = direction.scroll;\n        scrollDistance = position;\n      }\n      viewport[scrollDirection] = scrollDistance;\n    },\n    itemsLimitError() {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el);\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.');\n      });\n      throw new Error('Rendered items limit reached');\n    },\n    sortViews() {\n      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index);\n    }\n  }\n};\nfunction normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\n  if (typeof shadowMode !== 'boolean') {\n    createInjectorSSR = createInjector;\n    createInjector = shadowMode;\n    shadowMode = false;\n  }\n  // Vue.extend constructor export interop.\n  const options = typeof script === 'function' ? script.options : script;\n  // render functions\n  if (template && template.render) {\n    options.render = template.render;\n    options.staticRenderFns = template.staticRenderFns;\n    options._compiled = true;\n    // functional template\n    if (isFunctionalTemplate) {\n      options.functional = true;\n    }\n  }\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId;\n  }\n  let hook;\n  if (moduleIdentifier) {\n    // server build\n    hook = function (context) {\n      // 2.3 injection\n      context = context ||\n      // cached call\n      this.$vnode && this.$vnode.ssrContext ||\n      // stateful\n      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__;\n      }\n      // inject component styles\n      if (style) {\n        style.call(this, createInjectorSSR(context));\n      }\n      // register component module identifier for async chunk inference\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier);\n      }\n    };\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook;\n  } else if (style) {\n    hook = shadowMode ? function (context) {\n      style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));\n    } : function (context) {\n      style.call(this, createInjector(context));\n    };\n  }\n  if (hook) {\n    if (options.functional) {\n      // register for functional component in vue file\n      const originalRender = options.render;\n      options.render = function renderWithStyleInjection(h, context) {\n        hook.call(context);\n        return originalRender(h, context);\n      };\n    } else {\n      // inject component registration as beforeCreate hook\n      const existing = options.beforeCreate;\n      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n    }\n  }\n  return script;\n}\n\n/* script */\nconst __vue_script__$2 = script$2;\n/* template */\nvar __vue_render__$1 = function () {\n  var _obj, _obj$1;\n  var _vm = this;\n  var _h = _vm.$createElement;\n  var _c = _vm._self._c || _h;\n  return _c(\"div\", {\n    directives: [{\n      name: \"observe-visibility\",\n      rawName: \"v-observe-visibility\",\n      value: _vm.handleVisibilityChange,\n      expression: \"handleVisibilityChange\"\n    }],\n    staticClass: \"vue-recycle-scroller\",\n    class: (_obj = {\n      ready: _vm.ready,\n      \"page-mode\": _vm.pageMode\n    }, _obj[\"direction-\" + _vm.direction] = true, _obj),\n    on: {\n      \"&scroll\": function ($event) {\n        return _vm.handleScroll.apply(null, arguments);\n      }\n    }\n  }, [_vm.$slots.before ? _c(\"div\", {\n    ref: \"before\",\n    staticClass: \"vue-recycle-scroller__slot\"\n  }, [_vm._t(\"before\")], 2) : _vm._e(), _vm._v(\" \"), _c(_vm.listTag, {\n    ref: \"wrapper\",\n    tag: \"component\",\n    staticClass: \"vue-recycle-scroller__item-wrapper\",\n    class: _vm.listClass,\n    style: (_obj$1 = {}, _obj$1[_vm.direction === \"vertical\" ? \"minHeight\" : \"minWidth\"] = _vm.totalSize + \"px\", _obj$1)\n  }, [_vm._l(_vm.pool, function (view) {\n    return _c(_vm.itemTag, _vm._g({\n      key: view.nr.id,\n      tag: \"component\",\n      staticClass: \"vue-recycle-scroller__item-view\",\n      class: [_vm.itemClass, {\n        hover: !_vm.skipHover && _vm.hoverKey === view.nr.key\n      }],\n      style: _vm.ready ? {\n        transform: \"translate\" + (_vm.direction === \"vertical\" ? \"Y\" : \"X\") + \"(\" + view.position + \"px) translate\" + (_vm.direction === \"vertical\" ? \"X\" : \"Y\") + \"(\" + view.offset + \"px)\",\n        width: _vm.gridItems ? (_vm.direction === \"vertical\" ? _vm.itemSecondarySize || _vm.itemSize : _vm.itemSize) + \"px\" : undefined,\n        height: _vm.gridItems ? (_vm.direction === \"horizontal\" ? _vm.itemSecondarySize || _vm.itemSize : _vm.itemSize) + \"px\" : undefined\n      } : null\n    }, _vm.skipHover ? {} : {\n      mouseenter: function () {\n        _vm.hoverKey = view.nr.key;\n      },\n      mouseleave: function () {\n        _vm.hoverKey = null;\n      }\n    }), [_vm._t(\"default\", null, {\n      item: view.item,\n      index: view.nr.index,\n      active: view.nr.used\n    })], 2);\n  }), _vm._v(\" \"), _vm._t(\"empty\")], 2), _vm._v(\" \"), _vm.$slots.after ? _c(\"div\", {\n    ref: \"after\",\n    staticClass: \"vue-recycle-scroller__slot\"\n  }, [_vm._t(\"after\")], 2) : _vm._e(), _vm._v(\" \"), _c(\"ResizeObserver\", {\n    on: {\n      notify: _vm.handleResize\n    }\n  })], 1);\n};\nvar __vue_staticRenderFns__$1 = [];\n__vue_render__$1._withStripped = true;\n\n/* style */\nconst __vue_inject_styles__$2 = undefined;\n/* scoped */\nconst __vue_scope_id__$2 = undefined;\n/* module identifier */\nconst __vue_module_identifier__$2 = undefined;\n/* functional template */\nconst __vue_is_functional_template__$2 = false;\n/* style inject */\n\n/* style inject SSR */\n\n/* style inject shadow dom */\n\nconst __vue_component__$2 = /*#__PURE__*/normalizeComponent({\n  render: __vue_render__$1,\n  staticRenderFns: __vue_staticRenderFns__$1\n}, __vue_inject_styles__$2, __vue_script__$2, __vue_scope_id__$2, __vue_is_functional_template__$2, __vue_module_identifier__$2, false, undefined, undefined, undefined);\n\n//\nvar script$1 = {\n  name: 'DynamicScroller',\n  components: {\n    RecycleScroller: __vue_component__$2\n  },\n  provide() {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        requestAnimationFrame(() => {\n          if (!Array.isArray(entries)) {\n            return;\n          }\n          for (const entry of entries) {\n            if (entry.target) {\n              const event = new CustomEvent('resize', {\n                detail: {\n                  contentRect: entry.contentRect\n                }\n              });\n              entry.target.dispatchEvent(event);\n            }\n          }\n        });\n      });\n    }\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver\n    };\n  },\n  inheritAttrs: false,\n  props: {\n    ...props,\n    minItemSize: {\n      type: [Number, String],\n      required: true\n    }\n  },\n  data() {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        validSizes: {},\n        keyField: this.keyField,\n        simpleArray: false\n      }\n    };\n  },\n  computed: {\n    simpleArray,\n    itemsWithSize() {\n      const result = [];\n      const {\n        items,\n        keyField,\n        simpleArray\n      } = this;\n      const sizes = this.vscrollData.sizes;\n      const l = items.length;\n      for (let i = 0; i < l; i++) {\n        const item = items[i];\n        const id = simpleArray ? i : item[keyField];\n        let size = sizes[id];\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0;\n        }\n        result.push({\n          item,\n          id,\n          size\n        });\n      }\n      return result;\n    },\n    listeners() {\n      const listeners = {};\n      for (const key in this.$listeners) {\n        if (key !== 'resize' && key !== 'visible') {\n          listeners[key] = this.$listeners[key];\n        }\n      }\n      return listeners;\n    }\n  },\n  watch: {\n    items() {\n      this.forceUpdate(false);\n    },\n    simpleArray: {\n      handler(value) {\n        this.vscrollData.simpleArray = value;\n      },\n      immediate: true\n    },\n    direction(value) {\n      this.forceUpdate(true);\n    },\n    itemsWithSize(next, prev) {\n      const scrollTop = this.$el.scrollTop;\n\n      // Calculate total diff between prev and next sizes\n      // over current scroll top. Then add it to scrollTop to\n      // avoid jumping the contents that the user is seeing.\n      let prevActiveTop = 0;\n      let activeTop = 0;\n      const length = Math.min(next.length, prev.length);\n      for (let i = 0; i < length; i++) {\n        if (prevActiveTop >= scrollTop) {\n          break;\n        }\n        prevActiveTop += prev[i].size || this.minItemSize;\n        activeTop += next[i].size || this.minItemSize;\n      }\n      const offset = activeTop - prevActiveTop;\n      if (offset === 0) {\n        return;\n      }\n      this.$el.scrollTop += offset;\n    }\n  },\n  beforeCreate() {\n    this.$_updates = [];\n    this.$_undefinedSizes = 0;\n    this.$_undefinedMap = {};\n  },\n  activated() {\n    this.vscrollData.active = true;\n  },\n  deactivated() {\n    this.vscrollData.active = false;\n  },\n  methods: {\n    onScrollerResize() {\n      const scroller = this.$refs.scroller;\n      if (scroller) {\n        this.forceUpdate();\n      }\n      this.$emit('resize');\n    },\n    onScrollerVisible() {\n      this.$emit('vscroll:update', {\n        force: false\n      });\n      this.$emit('visible');\n    },\n    forceUpdate(clear = true) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.validSizes = {};\n      }\n      this.$emit('vscroll:update', {\n        force: true\n      });\n    },\n    scrollToItem(index) {\n      const scroller = this.$refs.scroller;\n      if (scroller) scroller.scrollToItem(index);\n    },\n    getItemSize(item, index = undefined) {\n      const id = this.simpleArray ? index != null ? index : this.items.indexOf(item) : item[this.keyField];\n      return this.vscrollData.sizes[id] || 0;\n    },\n    scrollToBottom() {\n      if (this.$_scrollingToBottom) return;\n      this.$_scrollingToBottom = true;\n      const el = this.$el;\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000;\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000;\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000;\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false;\n            } else {\n              requestAnimationFrame(cb);\n            }\n          });\n        };\n        requestAnimationFrame(cb);\n      });\n    }\n  }\n};\n\n/* script */\nconst __vue_script__$1 = script$1;\n\n/* template */\nvar __vue_render__ = function () {\n  var _vm = this;\n  var _h = _vm.$createElement;\n  var _c = _vm._self._c || _h;\n  return _c(\"RecycleScroller\", _vm._g(_vm._b({\n    ref: \"scroller\",\n    attrs: {\n      items: _vm.itemsWithSize,\n      \"min-item-size\": _vm.minItemSize,\n      direction: _vm.direction,\n      \"key-field\": \"id\",\n      \"list-tag\": _vm.listTag,\n      \"item-tag\": _vm.itemTag\n    },\n    on: {\n      resize: _vm.onScrollerResize,\n      visible: _vm.onScrollerVisible\n    },\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function (ref) {\n        var itemWithSize = ref.item;\n        var index = ref.index;\n        var active = ref.active;\n        return [_vm._t(\"default\", null, null, {\n          item: itemWithSize.item,\n          index: index,\n          active: active,\n          itemWithSize: itemWithSize\n        })];\n      }\n    }], null, true)\n  }, \"RecycleScroller\", _vm.$attrs, false), _vm.listeners), [_vm._v(\" \"), _c(\"template\", {\n    slot: \"before\"\n  }, [_vm._t(\"before\")], 2), _vm._v(\" \"), _c(\"template\", {\n    slot: \"after\"\n  }, [_vm._t(\"after\")], 2), _vm._v(\" \"), _c(\"template\", {\n    slot: \"empty\"\n  }, [_vm._t(\"empty\")], 2)], 2);\n};\nvar __vue_staticRenderFns__ = [];\n__vue_render__._withStripped = true;\n\n/* style */\nconst __vue_inject_styles__$1 = undefined;\n/* scoped */\nconst __vue_scope_id__$1 = undefined;\n/* module identifier */\nconst __vue_module_identifier__$1 = undefined;\n/* functional template */\nconst __vue_is_functional_template__$1 = false;\n/* style inject */\n\n/* style inject SSR */\n\n/* style inject shadow dom */\n\nconst __vue_component__$1 = /*#__PURE__*/normalizeComponent({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, false, undefined, undefined, undefined);\nvar script = {\n  name: 'DynamicScrollerItem',\n  inject: ['vscrollData', 'vscrollParent', 'vscrollResizeObserver'],\n  props: {\n    // eslint-disable-next-line vue/require-prop-types\n    item: {\n      required: true\n    },\n    watchData: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Indicates if the view is actively used to display an item.\n     */\n    active: {\n      type: Boolean,\n      required: true\n    },\n    index: {\n      type: Number,\n      default: undefined\n    },\n    sizeDependencies: {\n      type: [Array, Object],\n      default: null\n    },\n    emitResize: {\n      type: Boolean,\n      default: false\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  },\n  computed: {\n    id() {\n      if (this.vscrollData.simpleArray) return this.index;\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.item.hasOwnProperty(this.vscrollData.keyField)) return this.item[this.vscrollData.keyField];\n      throw new Error(`keyField '${this.vscrollData.keyField}' not found in your item. You should set a valid keyField prop on your Scroller`);\n    },\n    size() {\n      return this.vscrollData.validSizes[this.id] && this.vscrollData.sizes[this.id] || 0;\n    },\n    finalActive() {\n      return this.active && this.vscrollData.active;\n    }\n  },\n  watch: {\n    watchData: 'updateWatchData',\n    id() {\n      if (!this.size) {\n        this.onDataUpdate();\n      }\n    },\n    finalActive(value) {\n      if (!this.size) {\n        if (value) {\n          if (!this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes++;\n            this.vscrollParent.$_undefinedMap[this.id] = true;\n          }\n        } else {\n          if (this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes--;\n            this.vscrollParent.$_undefinedMap[this.id] = false;\n          }\n        }\n      }\n      if (this.vscrollResizeObserver) {\n        if (value) {\n          this.observeSize();\n        } else {\n          this.unobserveSize();\n        }\n      } else if (value && this.$_pendingVScrollUpdate === this.id) {\n        this.updateSize();\n      }\n    }\n  },\n  created() {\n    if (this.$isServer) return;\n    this.$_forceNextVScrollUpdate = null;\n    this.updateWatchData();\n    if (!this.vscrollResizeObserver) {\n      for (const k in this.sizeDependencies) {\n        this.$watch(() => this.sizeDependencies[k], this.onDataUpdate);\n      }\n      this.vscrollParent.$on('vscroll:update', this.onVscrollUpdate);\n      this.vscrollParent.$on('vscroll:update-size', this.onVscrollUpdateSize);\n    }\n  },\n  mounted() {\n    if (this.vscrollData.active) {\n      this.updateSize();\n      this.observeSize();\n    }\n  },\n  beforeDestroy() {\n    this.vscrollParent.$off('vscroll:update', this.onVscrollUpdate);\n    this.vscrollParent.$off('vscroll:update-size', this.onVscrollUpdateSize);\n    this.unobserveSize();\n  },\n  methods: {\n    updateSize() {\n      if (this.finalActive) {\n        if (this.$_pendingSizeUpdate !== this.id) {\n          this.$_pendingSizeUpdate = this.id;\n          this.$_forceNextVScrollUpdate = null;\n          this.$_pendingVScrollUpdate = null;\n          this.computeSize(this.id);\n        }\n      } else {\n        this.$_forceNextVScrollUpdate = this.id;\n      }\n    },\n    updateWatchData() {\n      if (this.watchData && !this.vscrollResizeObserver) {\n        this.$_watchData = this.$watch('item', () => {\n          this.onDataUpdate();\n        }, {\n          deep: true\n        });\n      } else if (this.$_watchData) {\n        this.$_watchData();\n        this.$_watchData = null;\n      }\n    },\n    onVscrollUpdate({\n      force\n    }) {\n      // If not active, sechedule a size update when it becomes active\n      if (!this.finalActive && force) {\n        this.$_pendingVScrollUpdate = this.id;\n      }\n      if (this.$_forceNextVScrollUpdate === this.id || force || !this.size) {\n        this.updateSize();\n      }\n    },\n    onDataUpdate() {\n      this.updateSize();\n    },\n    computeSize(id) {\n      this.$nextTick(() => {\n        if (this.id === id) {\n          const width = this.$el.offsetWidth;\n          const height = this.$el.offsetHeight;\n          this.applySize(width, height);\n        }\n        this.$_pendingSizeUpdate = null;\n      });\n    },\n    applySize(width, height) {\n      const size = ~~(this.vscrollParent.direction === 'vertical' ? height : width);\n      if (size && this.size !== size) {\n        if (this.vscrollParent.$_undefinedMap[this.id]) {\n          this.vscrollParent.$_undefinedSizes--;\n          this.vscrollParent.$_undefinedMap[this.id] = undefined;\n        }\n        this.$set(this.vscrollData.sizes, this.id, size);\n        this.$set(this.vscrollData.validSizes, this.id, true);\n        if (this.emitResize) this.$emit('resize', this.id);\n      }\n    },\n    observeSize() {\n      if (!this.vscrollResizeObserver || !this.$el.parentNode) return;\n      this.vscrollResizeObserver.observe(this.$el.parentNode);\n      this.$el.parentNode.addEventListener('resize', this.onResize);\n    },\n    unobserveSize() {\n      if (!this.vscrollResizeObserver) return;\n      this.vscrollResizeObserver.unobserve(this.$el.parentNode);\n      this.$el.parentNode.removeEventListener('resize', this.onResize);\n    },\n    onResize(event) {\n      const {\n        width,\n        height\n      } = event.detail.contentRect;\n      this.applySize(width, height);\n    }\n  },\n  render(h) {\n    return h(this.tag, this.$slots.default);\n  }\n};\n\n/* script */\nconst __vue_script__ = script;\n\n/* template */\n\n/* style */\nconst __vue_inject_styles__ = undefined;\n/* scoped */\nconst __vue_scope_id__ = undefined;\n/* module identifier */\nconst __vue_module_identifier__ = undefined;\n/* functional template */\nconst __vue_is_functional_template__ = undefined;\n/* style inject */\n\n/* style inject SSR */\n\n/* style inject shadow dom */\n\nconst __vue_component__ = /*#__PURE__*/normalizeComponent({}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, undefined, undefined);\nfunction IdState({\n  idProp = vm => vm.item.id\n} = {}) {\n  const store = {};\n  const vm = new Vue({\n    data() {\n      return {\n        store\n      };\n    }\n  });\n\n  // @vue/component\n  return {\n    data() {\n      return {\n        idState: null\n      };\n    },\n    created() {\n      this.$_id = null;\n      if (typeof idProp === 'function') {\n        this.$_getId = () => idProp.call(this, this);\n      } else {\n        this.$_getId = () => this[idProp];\n      }\n      this.$watch(this.$_getId, {\n        handler(value) {\n          this.$nextTick(() => {\n            this.$_id = value;\n          });\n        },\n        immediate: true\n      });\n      this.$_updateIdState();\n    },\n    beforeUpdate() {\n      this.$_updateIdState();\n    },\n    methods: {\n      /**\n       * Initialize an idState\n       * @param {number|string} id Unique id for the data\n       */\n      $_idStateInit(id) {\n        const factory = this.$options.idState;\n        if (typeof factory === 'function') {\n          const data = factory.call(this, this);\n          vm.$set(store, id, data);\n          this.$_id = id;\n          return data;\n        } else {\n          throw new Error('[mixin IdState] Missing `idState` function on component definition.');\n        }\n      },\n      /**\n       * Ensure idState is created and up-to-date\n       */\n      $_updateIdState() {\n        const id = this.$_getId();\n        if (id == null) {\n          console.warn(`No id found for IdState with idProp: '${idProp}'.`);\n        }\n        if (id !== this.$_id) {\n          if (!store[id]) {\n            this.$_idStateInit(id);\n          }\n          this.idState = store[id];\n        }\n      }\n    }\n  };\n}\nfunction registerComponents(Vue, prefix) {\n  Vue.component(`${prefix}recycle-scroller`, __vue_component__$2);\n  Vue.component(`${prefix}RecycleScroller`, __vue_component__$2);\n  Vue.component(`${prefix}dynamic-scroller`, __vue_component__$1);\n  Vue.component(`${prefix}DynamicScroller`, __vue_component__$1);\n  Vue.component(`${prefix}dynamic-scroller-item`, __vue_component__);\n  Vue.component(`${prefix}DynamicScrollerItem`, __vue_component__);\n}\nconst plugin = {\n  // eslint-disable-next-line no-undef\n  version: \"1.1.2\",\n  install(Vue, options) {\n    const finalOptions = Object.assign({}, {\n      installComponents: true,\n      componentsPrefix: ''\n    }, options);\n    for (const key in finalOptions) {\n      if (typeof finalOptions[key] !== 'undefined') {\n        config[key] = finalOptions[key];\n      }\n    }\n    if (finalOptions.installComponents) {\n      registerComponents(Vue, finalOptions.componentsPrefix);\n    }\n  }\n};\n\n// Auto-install\nlet GlobalVue = null;\nif (typeof window !== 'undefined') {\n  GlobalVue = window.Vue;\n} else if (typeof global !== 'undefined') {\n  GlobalVue = global.Vue;\n}\nif (GlobalVue) {\n  GlobalVue.use(plugin);\n}\nexport { __vue_component__$1 as DynamicScroller, __vue_component__ as DynamicScrollerItem, IdState, __vue_component__$2 as RecycleScroller, plugin as default };","map":{"version":3,"names":["config","itemsLimit","props","items","type","Array","required","keyField","String","default","direction","validator","value","includes","listTag","itemTag","simpleArray","length","supportsPassive","window","opts","Object","defineProperty","get","addEventListener","e","uid","script$2","name","components","ResizeObserver","ResizeObserver$1","directives","ObserveVisibility","itemSize","Number","gridItems","undefined","itemSecondarySize","minItemSize","sizeField","typeField","buffer","pageMode","Boolean","prerender","emitUpdate","skipHover","listClass","itemClass","data","pool","totalSize","ready","hoverKey","computed","sizes","accumulator","field","computedMinSize","current","i","l","size","$_computedMinItemSize","watch","updateVisibleItems","applyPageMode","handler","deep","created","$_startIndex","$_endIndex","$_views","Map","$_unusedViews","$_scrollDirty","$_lastUpdateScrollPosition","$_prerender","console","error","mounted","$nextTick","activated","lastPosition","scrollToPosition","beforeDestroy","removeListeners","methods","addView","index","item","key","view","position","nonReactive","id","used","configurable","push","unuseView","fake","unusedViews","nr","unusedPool","set","delete","handleResize","$emit","handleScroll","event","requestAnimationFrame","continuous","clearTimeout","$_refreshTimout","setTimeout","handleVisibilityChange","isVisible","entry","boundingClientRect","width","height","checkItem","checkPositionDiff","count","views","startIndex","endIndex","visibleStartIndex","visibleEndIndex","Math","min","scroll","getScroll","positionDiff","start","end","beforeSize","$refs","before","scrollHeight","after","afterSize","h","a","b","oldI","remainer","ceil","max","floor","itemsLimitError","$_continuous","clear","indexOf","unusedIndex","v","Error","pop","offset","$_sortTimer","sortViews","getListenerTarget","target","ScrollParent","$el","document","documentElement","body","el","isVertical","scrollState","bounds","getBoundingClientRect","boundsSize","top","left","innerHeight","innerWidth","scrollTop","clientHeight","scrollLeft","clientWidth","addListeners","listenerTarget","passive","removeEventListener","scrollToItem","viewport","scrollDirection","scrollDistance","viewportEl","tagName","scroller","scrollerPosition","log","sort","viewA","viewB","__vue_script__$2","script$1","RecycleScroller","__vue_component__$2","provide","$_resizeObserver","entries","isArray","CustomEvent","detail","contentRect","dispatchEvent","vscrollData","vscrollParent","vscrollResizeObserver","inheritAttrs","active","validSizes","itemsWithSize","result","$_undefinedMap","listeners","$listeners","forceUpdate","immediate","next","prev","prevActiveTop","activeTop","beforeCreate","$_updates","$_undefinedSizes","deactivated","onScrollerResize","onScrollerVisible","force","getItemSize","scrollToBottom","$_scrollingToBottom","cb","__vue_script__$1","script","inject","watchData","sizeDependencies","emitResize","tag","hasOwnProperty","finalActive","onDataUpdate","observeSize","unobserveSize","$_pendingVScrollUpdate","updateSize","$isServer","$_forceNextVScrollUpdate","updateWatchData","k","$watch","$on","onVscrollUpdate","onVscrollUpdateSize","$off","$_pendingSizeUpdate","computeSize","$_watchData","offsetWidth","offsetHeight","applySize","$set","parentNode","observe","onResize","unobserve","render","$slots","__vue_script__","IdState","idProp","vm","store","Vue","idState","$_id","$_getId","call","$_updateIdState","beforeUpdate","$_idStateInit","factory","$options","warn","registerComponents","prefix","component","__vue_component__$1","__vue_component__","plugin","version","install","options","finalOptions","assign","installComponents","componentsPrefix","GlobalVue","global","use"],"sources":["../src/config.js","../src/components/common.js","../src/utils.js","../src/components/RecycleScroller.vue","../src/components/DynamicScroller.vue","../src/components/DynamicScrollerItem.vue","../src/mixins/IdState.js","../src/index.js"],"sourcesContent":["export default {\n  itemsLimit: 1000,\n}\n","export const props = {\n  items: {\n    type: Array,\n    required: true,\n  },\n\n  keyField: {\n    type: String,\n    default: 'id',\n  },\n\n  direction: {\n    type: String,\n    default: 'vertical',\n    validator: (value) => ['vertical', 'horizontal'].includes(value),\n  },\n\n  listTag: {\n    type: String,\n    default: 'div',\n  },\n\n  itemTag: {\n    type: String,\n    default: 'div',\n  },\n}\n\nexport function simpleArray () {\n  return this.items.length && typeof this.items[0] !== 'object'\n}\n","export let supportsPassive = false\n\nif (typeof window !== 'undefined') {\n  supportsPassive = false\n  try {\n    var opts = Object.defineProperty({}, 'passive', {\n      get () {\n        supportsPassive = true\n      },\n    })\n    window.addEventListener('test', null, opts)\n  } catch (e) {}\n}\n","<template>\n  <div\n    v-observe-visibility=\"handleVisibilityChange\"\n    class=\"vue-recycle-scroller\"\n    :class=\"{\n      ready,\n      'page-mode': pageMode,\n      [`direction-${direction}`]: true,\n    }\"\n    @scroll.passive=\"handleScroll\"\n  >\n    <div\n      v-if=\"$slots.before\"\n      ref=\"before\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"before\"\n      />\n    </div>\n\n    <component\n      :is=\"listTag\"\n      ref=\"wrapper\"\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\n      class=\"vue-recycle-scroller__item-wrapper\"\n      :class=\"listClass\"\n    >\n      <component\n        :is=\"itemTag\"\n        v-for=\"view of pool\"\n        :key=\"view.nr.id\"\n        :style=\"ready ? {\n          transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px) translate${direction === 'vertical' ? 'X' : 'Y'}(${view.offset}px)`,\n          width: gridItems ? `${direction === 'vertical' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\n          height: gridItems ? `${direction === 'horizontal' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\n        } : null\"\n        class=\"vue-recycle-scroller__item-view\"\n        :class=\"[\n          itemClass,\n          {\n            hover: !skipHover && hoverKey === view.nr.key\n          },\n        ]\"\n        v-on=\"skipHover ? {} : {\n          mouseenter: () => { hoverKey = view.nr.key },\n          mouseleave: () => { hoverKey = null },\n        }\"\n      >\n        <slot\n          :item=\"view.item\"\n          :index=\"view.nr.index\"\n          :active=\"view.nr.used\"\n        />\n      </component>\n\n      <slot\n        name=\"empty\"\n      />\n    </component>\n\n    <div\n      v-if=\"$slots.after\"\n      ref=\"after\"\n      class=\"vue-recycle-scroller__slot\"\n    >\n      <slot\n        name=\"after\"\n      />\n    </div>\n\n    <ResizeObserver @notify=\"handleResize\" />\n  </div>\n</template>\n\n<script>\nimport { ResizeObserver } from 'vue-resize'\nimport { ObserveVisibility } from 'vue-observe-visibility'\nimport ScrollParent from 'scrollparent'\nimport config from '../config'\nimport { props, simpleArray } from './common'\nimport { supportsPassive } from '../utils'\n\nlet uid = 0\n\nexport default {\n  name: 'RecycleScroller',\n\n  components: {\n    ResizeObserver,\n  },\n\n  directives: {\n    ObserveVisibility,\n  },\n\n  props: {\n    ...props,\n\n    itemSize: {\n      type: Number,\n      default: null,\n    },\n\n    gridItems: {\n      type: Number,\n      default: undefined,\n    },\n\n    itemSecondarySize: {\n      type: Number,\n      default: undefined,\n    },\n\n    minItemSize: {\n      type: [Number, String],\n      default: null,\n    },\n\n    sizeField: {\n      type: String,\n      default: 'size',\n    },\n\n    typeField: {\n      type: String,\n      default: 'type',\n    },\n\n    buffer: {\n      type: Number,\n      default: 200,\n    },\n\n    pageMode: {\n      type: Boolean,\n      default: false,\n    },\n\n    prerender: {\n      type: Number,\n      default: 0,\n    },\n\n    emitUpdate: {\n      type: Boolean,\n      default: false,\n    },\n\n    skipHover: {\n      type: Boolean,\n      default: false,\n    },\n\n    listTag: {\n      type: String,\n      default: 'div',\n    },\n\n    itemTag: {\n      type: String,\n      default: 'div',\n    },\n\n    listClass: {\n      type: [String, Object, Array],\n      default: '',\n    },\n\n    itemClass: {\n      type: [String, Object, Array],\n      default: '',\n    },\n  },\n\n  data () {\n    return {\n      pool: [],\n      totalSize: 0,\n      ready: false,\n      hoverKey: null,\n    }\n  },\n\n  computed: {\n    sizes () {\n      if (this.itemSize === null) {\n        const sizes = {\n          '-1': { accumulator: 0 },\n        }\n        const items = this.items\n        const field = this.sizeField\n        const minItemSize = this.minItemSize\n        let computedMinSize = 10000\n        let accumulator = 0\n        let current\n        for (let i = 0, l = items.length; i < l; i++) {\n          current = items[i][field] || minItemSize\n          if (current < computedMinSize) {\n            computedMinSize = current\n          }\n          accumulator += current\n          sizes[i] = { accumulator, size: current }\n        }\n        // eslint-disable-next-line\n        this.$_computedMinItemSize = computedMinSize\n        return sizes\n      }\n      return []\n    },\n\n    simpleArray,\n  },\n\n  watch: {\n    items () {\n      this.updateVisibleItems(true)\n    },\n\n    pageMode () {\n      this.applyPageMode()\n      this.updateVisibleItems(false)\n    },\n\n    sizes: {\n      handler () {\n        this.updateVisibleItems(false)\n      },\n      deep: true,\n    },\n\n    gridItems () {\n      this.updateVisibleItems(true)\n    },\n\n    itemSecondarySize () {\n      this.updateVisibleItems(true)\n    },\n  },\n\n  created () {\n    this.$_startIndex = 0\n    this.$_endIndex = 0\n    this.$_views = new Map()\n    this.$_unusedViews = new Map()\n    this.$_scrollDirty = false\n    this.$_lastUpdateScrollPosition = 0\n\n    // In SSR mode, we also prerender the same number of item for the first render\n    // to avoir mismatch between server and client templates\n    if (this.prerender) {\n      this.$_prerender = true\n      this.updateVisibleItems(false)\n    }\n\n    if (this.gridItems && !this.itemSize) {\n      console.error('[vue-recycle-scroller] You must provide an itemSize when using gridItems')\n    }\n  },\n\n  mounted () {\n    this.applyPageMode()\n    this.$nextTick(() => {\n      // In SSR mode, render the real number of visible items\n      this.$_prerender = false\n      this.updateVisibleItems(true)\n      this.ready = true\n    })\n  },\n\n  activated () {\n    const lastPosition = this.$_lastUpdateScrollPosition\n    if (typeof lastPosition === 'number') {\n      this.$nextTick(() => {\n        this.scrollToPosition(lastPosition)\n      })\n    }\n  },\n\n  beforeDestroy () {\n    this.removeListeners()\n  },\n\n  methods: {\n    addView (pool, index, item, key, type) {\n      const view = {\n        item,\n        position: 0,\n      }\n      const nonReactive = {\n        id: uid++,\n        index,\n        used: true,\n        key,\n        type,\n      }\n      Object.defineProperty(view, 'nr', {\n        configurable: false,\n        value: nonReactive,\n      })\n      pool.push(view)\n      return view\n    },\n\n    unuseView (view, fake = false) {\n      const unusedViews = this.$_unusedViews\n      const type = view.nr.type\n      let unusedPool = unusedViews.get(type)\n      if (!unusedPool) {\n        unusedPool = []\n        unusedViews.set(type, unusedPool)\n      }\n      unusedPool.push(view)\n      if (!fake) {\n        view.nr.used = false\n        view.position = -9999\n        this.$_views.delete(view.nr.key)\n      }\n    },\n\n    handleResize () {\n      this.$emit('resize')\n      if (this.ready) this.updateVisibleItems(false)\n    },\n\n    handleScroll (event) {\n      if (!this.$_scrollDirty) {\n        this.$_scrollDirty = true\n        requestAnimationFrame(() => {\n          this.$_scrollDirty = false\n          const { continuous } = this.updateVisibleItems(false, true)\n\n          // It seems sometimes chrome doesn't fire scroll event :/\n          // When non continous scrolling is ending, we force a refresh\n          if (!continuous) {\n            clearTimeout(this.$_refreshTimout)\n            this.$_refreshTimout = setTimeout(this.handleScroll, 100)\n          }\n        })\n      }\n    },\n\n    handleVisibilityChange (isVisible, entry) {\n      if (this.ready) {\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\n          this.$emit('visible')\n          requestAnimationFrame(() => {\n            this.updateVisibleItems(false)\n          })\n        } else {\n          this.$emit('hidden')\n        }\n      }\n    },\n\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\n      const itemSize = this.itemSize\n      const gridItems = this.gridItems || 1\n      const itemSecondarySize = this.itemSecondarySize || itemSize\n      const minItemSize = this.$_computedMinItemSize\n      const typeField = this.typeField\n      const keyField = this.simpleArray ? null : this.keyField\n      const items = this.items\n      const count = items.length\n      const sizes = this.sizes\n      const views = this.$_views\n      const unusedViews = this.$_unusedViews\n      const pool = this.pool\n      let startIndex, endIndex\n      let totalSize\n      let visibleStartIndex, visibleEndIndex\n\n      if (!count) {\n        startIndex = endIndex = visibleStartIndex = visibleEndIndex = totalSize = 0\n      } else if (this.$_prerender) {\n        startIndex = visibleStartIndex = 0\n        endIndex = visibleEndIndex = Math.min(this.prerender, items.length)\n        totalSize = null\n      } else {\n        const scroll = this.getScroll()\n\n        // Skip update if use hasn't scrolled enough\n        if (checkPositionDiff) {\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\n          if (positionDiff < 0) positionDiff = -positionDiff\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\n            return {\n              continuous: true,\n            }\n          }\n        }\n        this.$_lastUpdateScrollPosition = scroll.start\n\n        const buffer = this.buffer\n        scroll.start -= buffer\n        scroll.end += buffer\n\n        // account for leading slot\n        let beforeSize = 0\n        if (this.$refs.before) {\n          beforeSize = this.$refs.before.scrollHeight\n          scroll.start -= beforeSize\n        }\n\n        // account for trailing slot\n        if (this.$refs.after) {\n          const afterSize = this.$refs.after.scrollHeight\n          scroll.end += afterSize\n        }\n\n        // Variable size mode\n        if (itemSize === null) {\n          let h\n          let a = 0\n          let b = count - 1\n          let i = ~~(count / 2)\n          let oldI\n\n          // Searching for startIndex\n          do {\n            oldI = i\n            h = sizes[i].accumulator\n            if (h < scroll.start) {\n              a = i\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\n              b = i\n            }\n            i = ~~((a + b) / 2)\n          } while (i !== oldI)\n          i < 0 && (i = 0)\n          startIndex = i\n\n          // For container style\n          totalSize = sizes[count - 1].accumulator\n\n          // Searching for endIndex\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\n          if (endIndex === -1) {\n            endIndex = items.length - 1\n          } else {\n            endIndex++\n            // Bounds\n            endIndex > count && (endIndex = count)\n          }\n\n          // search visible startIndex\n          for (visibleStartIndex = startIndex; visibleStartIndex < count && (beforeSize + sizes[visibleStartIndex].accumulator) < scroll.start; visibleStartIndex++);\n\n          // search visible endIndex\n          for (visibleEndIndex = visibleStartIndex; visibleEndIndex < count && (beforeSize + sizes[visibleEndIndex].accumulator) < scroll.end; visibleEndIndex++);\n        } else {\n          // Fixed size mode\n          startIndex = ~~(scroll.start / itemSize * gridItems)\n          const remainer = startIndex % gridItems\n          startIndex -= remainer\n          endIndex = Math.ceil(scroll.end / itemSize * gridItems)\n          visibleStartIndex = Math.max(0, Math.floor((scroll.start - beforeSize) / itemSize * gridItems))\n          visibleEndIndex = Math.floor((scroll.end - beforeSize) / itemSize * gridItems)\n\n          // Bounds\n          startIndex < 0 && (startIndex = 0)\n          endIndex > count && (endIndex = count)\n          visibleStartIndex < 0 && (visibleStartIndex = 0)\n          visibleEndIndex > count && (visibleEndIndex = count)\n\n          totalSize = Math.ceil(count / gridItems) * itemSize\n        }\n      }\n\n      if (endIndex - startIndex > config.itemsLimit) {\n        this.itemsLimitError()\n      }\n\n      this.totalSize = totalSize\n\n      let view\n\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\n\n      if (this.$_continuous !== continuous) {\n        if (continuous) {\n          views.clear()\n          unusedViews.clear()\n          for (let i = 0, l = pool.length; i < l; i++) {\n            view = pool[i]\n            this.unuseView(view)\n          }\n        }\n        this.$_continuous = continuous\n      } else if (continuous) {\n        for (let i = 0, l = pool.length; i < l; i++) {\n          view = pool[i]\n          if (view.nr.used) {\n            // Update view item index\n            if (checkItem) {\n              view.nr.index = items.indexOf(view.item)\n            }\n\n            // Check if index is still in visible range\n            if (\n              view.nr.index === -1 ||\n              view.nr.index < startIndex ||\n              view.nr.index >= endIndex\n            ) {\n              this.unuseView(view)\n            }\n          }\n        }\n      }\n\n      const unusedIndex = continuous ? null : new Map()\n\n      let item, type, unusedPool\n      let v\n      for (let i = startIndex; i < endIndex; i++) {\n        item = items[i]\n        const key = keyField ? item[keyField] : item\n        if (key == null) {\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\n        }\n        view = views.get(key)\n\n        if (!itemSize && !sizes[i].size) {\n          if (view) this.unuseView(view)\n          continue\n        }\n\n        // No view assigned to item\n        if (!view) {\n          if (i === items.length - 1) this.$emit('scroll-end')\n          if (i === 0) this.$emit('scroll-start')\n\n          type = item[typeField]\n          unusedPool = unusedViews.get(type)\n\n          if (continuous) {\n            // Reuse existing view\n            if (unusedPool && unusedPool.length) {\n              view = unusedPool.pop()\n              view.item = item\n              view.nr.used = true\n              view.nr.index = i\n              view.nr.key = key\n              view.nr.type = type\n            } else {\n              view = this.addView(pool, i, item, key, type)\n            }\n          } else {\n            // Use existing view\n            // We don't care if they are already used\n            // because we are not in continous scrolling\n            v = unusedIndex.get(type) || 0\n\n            if (!unusedPool || v >= unusedPool.length) {\n              view = this.addView(pool, i, item, key, type)\n              this.unuseView(view, true)\n              unusedPool = unusedViews.get(type)\n            }\n\n            view = unusedPool[v]\n            view.item = item\n            view.nr.used = true\n            view.nr.index = i\n            view.nr.key = key\n            view.nr.type = type\n            unusedIndex.set(type, v + 1)\n            v++\n          }\n          views.set(key, view)\n        } else {\n          view.nr.used = true\n          view.item = item\n        }\n\n        // Update position\n        if (itemSize === null) {\n          view.position = sizes[i - 1].accumulator\n          view.offset = 0\n        } else {\n          view.position = Math.floor(i / gridItems) * itemSize\n          view.offset = (i % gridItems) * itemSecondarySize\n        }\n      }\n\n      this.$_startIndex = startIndex\n      this.$_endIndex = endIndex\n\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex, visibleStartIndex, visibleEndIndex)\n\n      // After the user has finished scrolling\n      // Sort views so text selection is correct\n      clearTimeout(this.$_sortTimer)\n      this.$_sortTimer = setTimeout(this.sortViews, 300)\n\n      return {\n        continuous,\n      }\n    },\n\n    getListenerTarget () {\n      let target = ScrollParent(this.$el)\n      // Fix global scroll target for Chrome and Safari\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\n        target = window\n      }\n      return target\n    },\n\n    getScroll () {\n      const { $el: el, direction } = this\n      const isVertical = direction === 'vertical'\n      let scrollState\n\n      if (this.pageMode) {\n        const bounds = el.getBoundingClientRect()\n        const boundsSize = isVertical ? bounds.height : bounds.width\n        let start = -(isVertical ? bounds.top : bounds.left)\n        let size = isVertical ? window.innerHeight : window.innerWidth\n        if (start < 0) {\n          size += start\n          start = 0\n        }\n        if (start + size > boundsSize) {\n          size = boundsSize - start\n        }\n        scrollState = {\n          start,\n          end: start + size,\n        }\n      } else if (isVertical) {\n        scrollState = {\n          start: el.scrollTop,\n          end: el.scrollTop + el.clientHeight,\n        }\n      } else {\n        scrollState = {\n          start: el.scrollLeft,\n          end: el.scrollLeft + el.clientWidth,\n        }\n      }\n\n      return scrollState\n    },\n\n    applyPageMode () {\n      if (this.pageMode) {\n        this.addListeners()\n      } else {\n        this.removeListeners()\n      }\n    },\n\n    addListeners () {\n      this.listenerTarget = this.getListenerTarget()\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive\n        ? {\n            passive: true,\n          }\n        : false)\n      this.listenerTarget.addEventListener('resize', this.handleResize)\n    },\n\n    removeListeners () {\n      if (!this.listenerTarget) {\n        return\n      }\n\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\n\n      this.listenerTarget = null\n    },\n\n    scrollToItem (index) {\n      let scroll\n      if (this.itemSize === null) {\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\n      } else {\n        scroll = Math.floor(index / this.gridItems) * this.itemSize\n      }\n      this.scrollToPosition(scroll)\n    },\n\n    scrollToPosition (position) {\n      const direction = this.direction === 'vertical'\n        ? { scroll: 'scrollTop', start: 'top' }\n        : { scroll: 'scrollLeft', start: 'left' }\n\n      let viewport\n      let scrollDirection\n      let scrollDistance\n\n      if (this.pageMode) {\n        const viewportEl = ScrollParent(this.$el)\n        // HTML doesn't overflow like other elements\n        const scrollTop = viewportEl.tagName === 'HTML' ? 0 : viewportEl[direction.scroll]\n        const bounds = viewportEl.getBoundingClientRect()\n\n        const scroller = this.$el.getBoundingClientRect()\n        const scrollerPosition = scroller[direction.start] - bounds[direction.start]\n\n        viewport = viewportEl\n        scrollDirection = direction.scroll\n        scrollDistance = position + scrollTop + scrollerPosition\n      } else {\n        viewport = this.$el\n        scrollDirection = direction.scroll\n        scrollDistance = position\n      }\n\n      viewport[scrollDirection] = scrollDistance\n    },\n\n    itemsLimitError () {\n      setTimeout(() => {\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\n      })\n      throw new Error('Rendered items limit reached')\n    },\n\n    sortViews () {\n      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index)\n    },\n  },\n}\n</script>\n\n<style>\n.vue-recycle-scroller {\n  position: relative;\n}\n\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\n  overflow-y: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\n  overflow-x: auto;\n}\n\n.vue-recycle-scroller.direction-horizontal {\n  display: flex;\n}\n\n.vue-recycle-scroller__slot {\n  flex: auto 0 0;\n}\n\n.vue-recycle-scroller__item-wrapper {\n  flex: 1;\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n}\n\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\n  position: absolute;\n  top: 0;\n  left: 0;\n  will-change: transform;\n}\n\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\n  width: 100%;\n}\n\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\n  height: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\n  width: 100%;\n}\n\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\n  height: 100%;\n}\n</style>\n","<template>\n  <RecycleScroller\n    ref=\"scroller\"\n    :items=\"itemsWithSize\"\n    :min-item-size=\"minItemSize\"\n    :direction=\"direction\"\n    key-field=\"id\"\n    :list-tag=\"listTag\"\n    :item-tag=\"itemTag\"\n    v-bind=\"$attrs\"\n    @resize=\"onScrollerResize\"\n    @visible=\"onScrollerVisible\"\n    v-on=\"listeners\"\n  >\n    <template slot-scope=\"{ item: itemWithSize, index, active }\">\n      <slot\n        v-bind=\"{\n          item: itemWithSize.item,\n          index,\n          active,\n          itemWithSize\n        }\"\n      />\n    </template>\n    <template slot=\"before\">\n      <slot name=\"before\" />\n    </template>\n    <template slot=\"after\">\n      <slot name=\"after\" />\n    </template>\n    <template slot=\"empty\">\n      <slot name=\"empty\" />\n    </template>\n  </RecycleScroller>\n</template>\n\n<script>\nimport RecycleScroller from './RecycleScroller.vue'\nimport { props, simpleArray } from './common'\n\nexport default {\n  name: 'DynamicScroller',\n\n  components: {\n    RecycleScroller,\n  },\n\n  provide () {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.$_resizeObserver = new ResizeObserver(entries => {\n        requestAnimationFrame(() => {\n          if (!Array.isArray(entries)) {\n            return\n          }\n          for (const entry of entries) {\n            if (entry.target) {\n              const event = new CustomEvent(\n                'resize',\n                {\n                  detail: {\n                    contentRect: entry.contentRect,\n                  },\n                },\n              )\n              entry.target.dispatchEvent(event)\n            }\n          }\n        })\n      })\n    }\n\n    return {\n      vscrollData: this.vscrollData,\n      vscrollParent: this,\n      vscrollResizeObserver: this.$_resizeObserver,\n    }\n  },\n\n  inheritAttrs: false,\n\n  props: {\n    ...props,\n\n    minItemSize: {\n      type: [Number, String],\n      required: true,\n    },\n  },\n\n  data () {\n    return {\n      vscrollData: {\n        active: true,\n        sizes: {},\n        validSizes: {},\n        keyField: this.keyField,\n        simpleArray: false,\n      },\n    }\n  },\n\n  computed: {\n    simpleArray,\n\n    itemsWithSize () {\n      const result = []\n      const { items, keyField, simpleArray } = this\n      const sizes = this.vscrollData.sizes\n      const l = items.length\n      for (let i = 0; i < l; i++) {\n        const item = items[i]\n        const id = simpleArray ? i : item[keyField]\n        let size = sizes[id]\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\n          size = 0\n        }\n        result.push({\n          item,\n          id,\n          size,\n        })\n      }\n      return result\n    },\n\n    listeners () {\n      const listeners = {}\n      for (const key in this.$listeners) {\n        if (key !== 'resize' && key !== 'visible') {\n          listeners[key] = this.$listeners[key]\n        }\n      }\n      return listeners\n    },\n  },\n\n  watch: {\n    items () {\n      this.forceUpdate(false)\n    },\n\n    simpleArray: {\n      handler (value) {\n        this.vscrollData.simpleArray = value\n      },\n      immediate: true,\n    },\n\n    direction (value) {\n      this.forceUpdate(true)\n    },\n\n    itemsWithSize (next, prev) {\n      const scrollTop = this.$el.scrollTop\n\n      // Calculate total diff between prev and next sizes\n      // over current scroll top. Then add it to scrollTop to\n      // avoid jumping the contents that the user is seeing.\n      let prevActiveTop = 0; let activeTop = 0\n      const length = Math.min(next.length, prev.length)\n      for (let i = 0; i < length; i++) {\n        if (prevActiveTop >= scrollTop) {\n          break\n        }\n        prevActiveTop += prev[i].size || this.minItemSize\n        activeTop += next[i].size || this.minItemSize\n      }\n      const offset = activeTop - prevActiveTop\n\n      if (offset === 0) {\n        return\n      }\n\n      this.$el.scrollTop += offset\n    },\n  },\n\n  beforeCreate () {\n    this.$_updates = []\n    this.$_undefinedSizes = 0\n    this.$_undefinedMap = {}\n  },\n\n  activated () {\n    this.vscrollData.active = true\n  },\n\n  deactivated () {\n    this.vscrollData.active = false\n  },\n\n  methods: {\n    onScrollerResize () {\n      const scroller = this.$refs.scroller\n      if (scroller) {\n        this.forceUpdate()\n      }\n      this.$emit('resize')\n    },\n\n    onScrollerVisible () {\n      this.$emit('vscroll:update', { force: false })\n      this.$emit('visible')\n    },\n\n    forceUpdate (clear = true) {\n      if (clear || this.simpleArray) {\n        this.vscrollData.validSizes = {}\n      }\n      this.$emit('vscroll:update', { force: true })\n    },\n\n    scrollToItem (index) {\n      const scroller = this.$refs.scroller\n      if (scroller) scroller.scrollToItem(index)\n    },\n\n    getItemSize (item, index = undefined) {\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\n      return this.vscrollData.sizes[id] || 0\n    },\n\n    scrollToBottom () {\n      if (this.$_scrollingToBottom) return\n      this.$_scrollingToBottom = true\n      const el = this.$el\n      // Item is inserted to the DOM\n      this.$nextTick(() => {\n        el.scrollTop = el.scrollHeight + 5000\n        // Item sizes are computed\n        const cb = () => {\n          el.scrollTop = el.scrollHeight + 5000\n          requestAnimationFrame(() => {\n            el.scrollTop = el.scrollHeight + 5000\n            if (this.$_undefinedSizes === 0) {\n              this.$_scrollingToBottom = false\n            } else {\n              requestAnimationFrame(cb)\n            }\n          })\n        }\n        requestAnimationFrame(cb)\n      })\n    },\n  },\n}\n</script>\n","<script>\nexport default {\n  name: 'DynamicScrollerItem',\n\n  inject: [\n    'vscrollData',\n    'vscrollParent',\n    'vscrollResizeObserver',\n  ],\n\n  props: {\n    // eslint-disable-next-line vue/require-prop-types\n    item: {\n      required: true,\n    },\n\n    watchData: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Indicates if the view is actively used to display an item.\n     */\n    active: {\n      type: Boolean,\n      required: true,\n    },\n\n    index: {\n      type: Number,\n      default: undefined,\n    },\n\n    sizeDependencies: {\n      type: [Array, Object],\n      default: null,\n    },\n\n    emitResize: {\n      type: Boolean,\n      default: false,\n    },\n\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  computed: {\n    id () {\n      if (this.vscrollData.simpleArray) return this.index\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.item.hasOwnProperty(this.vscrollData.keyField)) return this.item[this.vscrollData.keyField]\n      throw new Error(`keyField '${this.vscrollData.keyField}' not found in your item. You should set a valid keyField prop on your Scroller`)\n    },\n\n    size () {\n      return (this.vscrollData.validSizes[this.id] && this.vscrollData.sizes[this.id]) || 0\n    },\n\n    finalActive () {\n      return this.active && this.vscrollData.active\n    },\n  },\n\n  watch: {\n    watchData: 'updateWatchData',\n\n    id () {\n      if (!this.size) {\n        this.onDataUpdate()\n      }\n    },\n\n    finalActive (value) {\n      if (!this.size) {\n        if (value) {\n          if (!this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes++\n            this.vscrollParent.$_undefinedMap[this.id] = true\n          }\n        } else {\n          if (this.vscrollParent.$_undefinedMap[this.id]) {\n            this.vscrollParent.$_undefinedSizes--\n            this.vscrollParent.$_undefinedMap[this.id] = false\n          }\n        }\n      }\n\n      if (this.vscrollResizeObserver) {\n        if (value) {\n          this.observeSize()\n        } else {\n          this.unobserveSize()\n        }\n      } else if (value && this.$_pendingVScrollUpdate === this.id) {\n        this.updateSize()\n      }\n    },\n  },\n\n  created () {\n    if (this.$isServer) return\n\n    this.$_forceNextVScrollUpdate = null\n    this.updateWatchData()\n\n    if (!this.vscrollResizeObserver) {\n      for (const k in this.sizeDependencies) {\n        this.$watch(() => this.sizeDependencies[k], this.onDataUpdate)\n      }\n\n      this.vscrollParent.$on('vscroll:update', this.onVscrollUpdate)\n      this.vscrollParent.$on('vscroll:update-size', this.onVscrollUpdateSize)\n    }\n  },\n\n  mounted () {\n    if (this.vscrollData.active) {\n      this.updateSize()\n      this.observeSize()\n    }\n  },\n\n  beforeDestroy () {\n    this.vscrollParent.$off('vscroll:update', this.onVscrollUpdate)\n    this.vscrollParent.$off('vscroll:update-size', this.onVscrollUpdateSize)\n    this.unobserveSize()\n  },\n\n  methods: {\n    updateSize () {\n      if (this.finalActive) {\n        if (this.$_pendingSizeUpdate !== this.id) {\n          this.$_pendingSizeUpdate = this.id\n          this.$_forceNextVScrollUpdate = null\n          this.$_pendingVScrollUpdate = null\n          this.computeSize(this.id)\n        }\n      } else {\n        this.$_forceNextVScrollUpdate = this.id\n      }\n    },\n\n    updateWatchData () {\n      if (this.watchData && !this.vscrollResizeObserver) {\n        this.$_watchData = this.$watch('item', () => {\n          this.onDataUpdate()\n        }, {\n          deep: true,\n        })\n      } else if (this.$_watchData) {\n        this.$_watchData()\n        this.$_watchData = null\n      }\n    },\n\n    onVscrollUpdate ({ force }) {\n      // If not active, sechedule a size update when it becomes active\n      if (!this.finalActive && force) {\n        this.$_pendingVScrollUpdate = this.id\n      }\n\n      if (this.$_forceNextVScrollUpdate === this.id || force || !this.size) {\n        this.updateSize()\n      }\n    },\n\n    onDataUpdate () {\n      this.updateSize()\n    },\n\n    computeSize (id) {\n      this.$nextTick(() => {\n        if (this.id === id) {\n          const width = this.$el.offsetWidth\n          const height = this.$el.offsetHeight\n          this.applySize(width, height)\n        }\n        this.$_pendingSizeUpdate = null\n      })\n    },\n\n    applySize (width, height) {\n      const size = ~~(this.vscrollParent.direction === 'vertical' ? height : width)\n      if (size && this.size !== size) {\n        if (this.vscrollParent.$_undefinedMap[this.id]) {\n          this.vscrollParent.$_undefinedSizes--\n          this.vscrollParent.$_undefinedMap[this.id] = undefined\n        }\n        this.$set(this.vscrollData.sizes, this.id, size)\n        this.$set(this.vscrollData.validSizes, this.id, true)\n        if (this.emitResize) this.$emit('resize', this.id)\n      }\n    },\n\n    observeSize () {\n      if (!this.vscrollResizeObserver || !this.$el.parentNode) return\n      this.vscrollResizeObserver.observe(this.$el.parentNode)\n      this.$el.parentNode.addEventListener('resize', this.onResize)\n    },\n\n    unobserveSize () {\n      if (!this.vscrollResizeObserver) return\n      this.vscrollResizeObserver.unobserve(this.$el.parentNode)\n      this.$el.parentNode.removeEventListener('resize', this.onResize)\n    },\n\n    onResize (event) {\n      const { width, height } = event.detail.contentRect\n      this.applySize(width, height)\n    },\n  },\n\n  render (h) {\n    return h(this.tag, this.$slots.default)\n  },\n}\n</script>\n","import Vue from 'vue'\n\nexport default function ({\n  idProp = vm => vm.item.id,\n} = {}) {\n  const store = {}\n  const vm = new Vue({\n    data () {\n      return {\n        store,\n      }\n    },\n  })\n\n  // @vue/component\n  return {\n    data () {\n      return {\n        idState: null,\n      }\n    },\n\n    created () {\n      this.$_id = null\n      if (typeof idProp === 'function') {\n        this.$_getId = () => idProp.call(this, this)\n      } else {\n        this.$_getId = () => this[idProp]\n      }\n      this.$watch(this.$_getId, {\n        handler (value) {\n          this.$nextTick(() => {\n            this.$_id = value\n          })\n        },\n        immediate: true,\n      })\n      this.$_updateIdState()\n    },\n\n    beforeUpdate () {\n      this.$_updateIdState()\n    },\n\n    methods: {\n      /**\n       * Initialize an idState\n       * @param {number|string} id Unique id for the data\n       */\n      $_idStateInit (id) {\n        const factory = this.$options.idState\n        if (typeof factory === 'function') {\n          const data = factory.call(this, this)\n          vm.$set(store, id, data)\n          this.$_id = id\n          return data\n        } else {\n          throw new Error('[mixin IdState] Missing `idState` function on component definition.')\n        }\n      },\n\n      /**\n       * Ensure idState is created and up-to-date\n       */\n      $_updateIdState () {\n        const id = this.$_getId()\n        if (id == null) {\n          console.warn(`No id found for IdState with idProp: '${idProp}'.`)\n        }\n        if (id !== this.$_id) {\n          if (!store[id]) {\n            this.$_idStateInit(id)\n          }\n          this.idState = store[id]\n        }\n      },\n    },\n  }\n}\n","import config from './config'\n\nimport RecycleScroller from './components/RecycleScroller.vue'\nimport DynamicScroller from './components/DynamicScroller.vue'\nimport DynamicScrollerItem from './components/DynamicScrollerItem.vue'\n\nexport { default as IdState } from './mixins/IdState'\n\nexport {\n  RecycleScroller,\n  DynamicScroller,\n  DynamicScrollerItem,\n}\n\nfunction registerComponents (Vue, prefix) {\n  Vue.component(`${prefix}recycle-scroller`, RecycleScroller)\n  Vue.component(`${prefix}RecycleScroller`, RecycleScroller)\n  Vue.component(`${prefix}dynamic-scroller`, DynamicScroller)\n  Vue.component(`${prefix}DynamicScroller`, DynamicScroller)\n  Vue.component(`${prefix}dynamic-scroller-item`, DynamicScrollerItem)\n  Vue.component(`${prefix}DynamicScrollerItem`, DynamicScrollerItem)\n}\n\nconst plugin = {\n  // eslint-disable-next-line no-undef\n  version: VERSION,\n  install (Vue, options) {\n    const finalOptions = Object.assign({}, {\n      installComponents: true,\n      componentsPrefix: '',\n    }, options)\n\n    for (const key in finalOptions) {\n      if (typeof finalOptions[key] !== 'undefined') {\n        config[key] = finalOptions[key]\n      }\n    }\n\n    if (finalOptions.installComponents) {\n      registerComponents(Vue, finalOptions.componentsPrefix)\n    }\n  },\n}\n\nexport default plugin\n\n// Auto-install\nlet GlobalVue = null\nif (typeof window !== 'undefined') {\n  GlobalVue = window.Vue\n} else if (typeof global !== 'undefined') {\n  GlobalVue = global.Vue\n}\nif (GlobalVue) {\n  GlobalVue.use(plugin)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}